name: Deploy LEMP Stack with WordPress

on:
  push:
    branches:
      - main  # Trigger deployment when pushing to the main branch

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository files
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up SSH key for EC2 access
      - name: Set up SSH key for EC2 access
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: Install necessary tools
      - name: Install necessary tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl unzip rsync

      # Step 4: Add EC2 instance to known_hosts to avoid SSH host verification
      - name: Add EC2 instance to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      # Step 5: Copy repository files, including deploy.sh, to EC2 instance
      - name: Copy files to EC2 instance
        run: |
          echo "Copying repository files to the EC2 instance..."
          rsync -avz --exclude '.git' ./ ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/${{ secrets.REMOTE_USER }}/

      # Step 6: Copy wordpress folder to www folder
      - name: Copy wordpress folder to www folder
        run: |
          echo "Copying wordpress folder to the www folder..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} <<EOF
            sudo cp -r /home/${{ secrets.REMOTE_USER }}/wordpress /var/www/
            sudo chown -R www-data:www-data /var/www/wordpress/wp-content
            sudo chmod -R 755 /var/www/wordpress/wp-content
          EOF

      # Step 7: Check if MariaDB is running, else install it and create the database
      - name: Check if MariaDB is running, else install it and create the database
        run: |
          echo "Checking if MariaDB is running on EC2 instance..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} <<EOF
            # Check if MariaDB service is active
            if systemctl is-active --quiet mariadb; then
              echo "MariaDB service is already running."
            else
              echo "MariaDB service is not running. Installing MariaDB..."

              # Update package list and install MariaDB server
              sudo apt-get update -y
              sudo apt-get install -y mariadb-server mariadb-client

              # Start MariaDB service
              sudo systemctl start mariadb
              sudo systemctl enable mariadb
            fi

            # Create the WordPress database and user (using GitHub Secrets for security)
            sudo mysql -e "CREATE DATABASE ${DB_NAME};"
            sudo mysql -e "CREATE USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
            sudo mysql -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
            sudo mysql -e "FLUSH PRIVILEGES;"
          EOF

      # Step 8: Check if wp-config.php exists, if not, create it from wp-config-sample.php
      - name: Configure wp-config.php
        run: |
          echo "Checking if wp-config.php exists, if not creating from wp-config-sample.php..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} <<EOF
            cd /var/www/wordpress

            # Check if wp-config.php exists
            if [ ! -f wp-config.php ]; then
              # Create wp-config.php from wp-config-sample.php
              cp wp-config-sample.php wp-config.php

              # Replace placeholders in wp-config.php with actual values
              sed -i "s/database_name_here/${DB_NAME}/g" wp-config.php
              sed -i "s/username_here/${DB_USER}/g" wp-config.php
              sed -i "s/password_here/${DB_PASSWORD}/g" wp-config.php

              # Optional: Set WP_HOME and WP_SITEURL (if needed)
              sed -i "s|'WP_HOME', 'http://example.com'|'WP_HOME', '${WP_HOME}'|g" wp-config.php
              sed -i "s|'WP_SITEURL', 'http://example.com/wordpress'|'WP_SITEURL', '${WP_SITEURL}'|g" wp-config.php

              # Set proper file permissions
              sudo chown www-data:www-data wp-config.php
              sudo chmod 644 wp-config.php

              echo "wp-config.php has been created and configured."
            else
              echo "wp-config.php already exists, skipping creation."
            fi
          EOF

      # Step 9: Run the deploy.sh script on EC2
      - name: Run deploy.sh script on EC2
        run: |
          echo "Running deploy.sh script on EC2..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'bash /home/${{ secrets.REMOTE_USER }}/deploy.sh'

      # Step 10: Clean up
      - name: Clean up
        run: |
          echo "Deployment completed successfully!"
